#if ( defined(MSAA_ALPHATEST_DX10_1_ATOC) || defined(MSAA_ALPHATEST_DX10_1) ) 
#define EXTEND_F_DEFFER
#endif

#include "common.h"
#include "sload.h"
#include "iostructs\p_lod.h"

void sample_Textures( inout float4 D, inout float4 H, float2 tc1, float2 tc0, float4 af, float2 pixeloffset )
{
	float2 ddx_tc0 = dFdx( tc0 );
	float2 ddy_tc0 = dFdy( tc0 );
	float2 ddx_tc1 = dFdx( tc1 );
	float2 ddy_tc1 = dFdy( tc1 );

	float4 D1 	= tex2D(s_base, tc1 + pixeloffset.x * ddx_tc1 + pixeloffset.y * ddy_tc1 );
	float4 D0 	= tex2D(s_base, tc0 + pixeloffset.x * ddx_tc0 + pixeloffset.y * ddy_tc0 );
	float4 H0 	= tex2D(s_hemi, tc0 + pixeloffset.x * ddx_tc0 + pixeloffset.y * ddy_tc0 );	H0.xyz 	=  H0.rgb*2.0-1.0;	// expand
	float4 H1 	= tex2D(s_hemi, tc1 + pixeloffset.x * ddx_tc1 + pixeloffset.y * ddy_tc1 );	H1.xyz 	=  H1.rgb*2.0-1.0;	// expand

	D 	= lerp		(D0,D1,af.w);		D.w	*= af.z;	// multiply alpha
	H 	= lerp		(H0,H1,af.w);		H.w	*= af.x;	// multiply hemi
}

#ifdef	ATOC

float4 _main ( v2p I )
{
	float4	D;
	float4	H;
	sample_Textures(D, H, I.tc1, I.tc0, I.af, float2(0.0,0.0) );
	D.w	= (D.w-(96.0/255.0)*0.5)/(1.0-(96.0/255.0)*0.5);
	return	D.w;
}

#else	//	ATOC

#ifdef	MSAA_ALPHATEST_DX10_1_ATOC
f_deffer 	_main	( v2p I, float4 pos2d )
#else	//	MSAA_ALPHATEST_DX10_1_ATOC
f_deffer 	_main	( v2p I )
#endif	//	MSAA_ALPHATEST_DX10_1_ATOC
{
	f_deffer O;

	// 1. Base texture + kill pixels with low alpha
	float4	D;
	float4	H;
  
#if !defined(MSAA_ALPHATEST_DX10_1)
	sample_Textures(D, H, I.tc1, I.tc0, I.af, float2(0,0));

#if	!( defined(MSAA_ALPHATEST_DX10_1_ATOC) || defined(MSAA_ALPHATEST_DX10_0_ATOC) )
	clip		(D.w-(96.0/255.0))  ;
#endif	//	!( defined(MSAA_ALPHATEST_DX10_1_ATOC) || defined(MSAA_ALPHATEST_DX10_1_ATOC) )
#ifdef 	MSAA_ALPHATEST_DX10_1_ATOC
	float alpha = (D.w-(96.0/255.0)*0.5)/(1.0-(96.0/255.0)*0.5);
	uint mask = alpha_to_coverage ( alpha, pos2d );
#endif	//	MSAA_ALPHATEST_DX10_1_ATOC

#else
	uint mask = 0x0;
  
	float2 pixeloffset = MSAAOffsets[0]*(1.0/16.0);
  
	sample_Textures(D, H, I.tc1, I.tc0, I.af, pixeloffset );

	if( D.w-(96.0/255.0) >= 0 ) mask |= 0x1;
  
	[unroll] for( int i = 1; i < MSAA_SAMPLES; ++i )
	{
		float4 DI;
		float4 HI;
		pixeloffset = MSAAOffsets[i]*(1.0/16.0);
		sample_Textures(DI, HI, I.tc1, I.tc0, I.af, pixeloffset );

		if( DI.w-(96.0/255.0) >= 0 ) mask |= ( uint(0x1) << i );
	}
	
 	if( mask == 0x0 )	discard;
#endif
  
	float3 N 	= normalize	(H.xyz);

	// 2. Standart output
#ifndef EXTEND_F_DEFFER
	O				= pack_gbuffer(
								float4	(N				, H.w		),
								float4 	(I.Pe + N*def_virtualh/2.0	, 0		),
								float4	(D.rgb				, def_gloss	));		// OUT: rgb.gloss
#else
	O				= pack_gbuffer(
								float4	(N				, H.w		),
								float4 	(I.Pe + N*def_virtualh/2.0	, 0		),
								float4	(D.rgb				, def_gloss	),
								mask );		// OUT: rgb.gloss
#endif

	return O;
}

#endif	//	ATOC