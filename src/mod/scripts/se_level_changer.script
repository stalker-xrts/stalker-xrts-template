local LuaLogger = require("scripts.utils.logging").LuaLogger
local create_ts_class_instance = require("lualib_bundle").__TS__New
local log = create_ts_class_instance(LuaLogger, "cover_manager");

class "se_level_changer" (cse_alife_level_changer)

function se_level_changer:__init(section)
  super (section)

  log:info("Init new level changer:", section)

  self.enabled = true
  self.hint = "level_changer_invitation"
end

function se_level_changer:on_register()
  cse_alife_level_changer.on_register(self)
  -- ��������� ���������� ������� �� ������� ����� ����.
  checkSpawnIniForStoryId(self)
end

function se_level_changer:on_unregister()
  unregister_story_object_by_id(self.id)
  cse_alife_level_changer.on_unregister(self)
end

function se_level_changer:STATE_Write(packet)
  cse_alife_level_changer.STATE_Write(self, packet)

  set_save_marker(packet, "save", false, "se_level_changer")
  packet:w_bool(self.enabled)
  packet:w_stringZ(self.hint)
  set_save_marker(packet, "save", true, "se_level_changer")
end

function se_level_changer:STATE_Read(packet, size)
  cse_alife_level_changer.STATE_Read(self, packet, size)

  if editor() then
    return
  end

  set_save_marker(packet, "load", false, "se_level_changer")
  self.enabled = packet:r_bool()
  self.hint = packet:r_stringZ()
  set_save_marker(packet, "load", true, "se_level_changer")
end
