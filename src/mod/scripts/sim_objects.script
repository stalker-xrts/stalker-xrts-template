local gameConfig = require("lib.configs.GameConfig").gameConfig
local LuaLogger = require("scripts.utils.logging").LuaLogger
local create_ts_class_instance = require("lualib_bundle").__TS__New
local log = create_ts_class_instance(LuaLogger, "sim_objects");

--'******************************************************
--'*	������ ����������.
--'******************************************************

--' ������� ���������� ������� � ������ � ��� � �������:
--' npc = { smart_id, squad_id, flags}
local objects = {}

--' ������� ���������� ������� �������������� �� squad_id:
local squad_objects = {}

--' �������� ������:
--' alive - ����� �������� ��� �������
--' marked - ������� �� �� ���������.

--' ����������� ������ ���������.
function register_object(obj)
  log:info("Registering sim object:", obj.id);

	if objects[obj.id] ~= nil then
		abort("Object already exist in list [%s]", obj:name())
	end

	objects[obj.id] = {smart_id = -1, squad_id = nil, flags = {}}

	objects[obj.id].flags.alive = obj:alive()
	set_obj_squad(obj, -1)

	show_object_spot(obj)

	--' ��������. ����� ����� �������� ������������.
	local obj_ini = obj:spawn_ini()
	local smart = utils.cfg_get_string(obj_ini, "logic", "smart_terrain", obj, false, "", "")
	local smart_obj = sim_board.get_sim_board():get_smart_by_name(smart)

	if smart_obj == nil then
		return
	end

	alife():object(smart_obj.id):register_npc(obj)
	--obj.m_smart_terrain_id = tonumber(smart_id)
end

--' ������������� ���������.
function unregister_object(obj)
	if objects[obj.id] == nil then
		abort("Trying to unregister nil object [%s]", obj:name())
	end

	hide_object_spot(obj)

	objects[obj.id] = nil
end

--' �������� ������ ��� ��������.
function object_die(obj)
	objects[obj.id].flags.alive = false

	hide_object_spot(obj)

	--' ������ ������ �� ������.
	local squad_id = objects[obj.id].squad_id
	squad_objects[squad_id][obj.id] = nil
	objects[obj.id].squad_id = nil
end

--' �������� ������ �� �����
function show_object_spot(obj)
	if(gameConfig.DEBUG.IS_SMARTS_DEBUG_ENABLED) then
		local community = getObjComunity(obj)
		level.map_add_object_spot(obj.id, "alife_presentation_"..community, obj:name())
	end

	if objects[obj.id].flags.marked then
		return
	end

	if not objects[obj.id].flags.alive then
		return
	end

	objects[obj.id].flags.marked = true
end

--' ������ ������ � �����
function hide_object_spot(obj)
	if(gameConfig.DEBUG.IS_SMARTS_DEBUG_ENABLED) then
		local community = getObjComunity(obj)
		level.map_remove_object_spot(obj.id, "alife_presentation_"..community)
	end

	if not objects[obj.id].flags.marked then
		return
	end

	objects[obj.id].flags.marked = false
end

--' �������� ����������� �������
function getObjComunity(obj)
	if obj:clsid() == clsid.script_stalker then
		return obj:community()
	else
		return "monster"
	end
end


--' ��������� ������ �� �������� ����.
function clear()
	objects = {}
	squad_objects = {}
end
