--- --------------------------------------------------------------------------------------------------------------------
--- Global entrypoint for stalker scripts
--- --------------------------------------------------------------------------------------------------------------------

-- Inject LUA globals and enable modules requiring
package.path = package.path .. string.format("%sgamedata\\?.script;", getFS():update_path("$fs_root$", ""))

--

local LuaLogger = require("scripts.utils.logging").LuaLogger
local create_ts_class_instance = require("lualib_bundle").__TS__New
local log = create_ts_class_instance(LuaLogger, "_g");

log:info("Initialize globals")

--

require("scripts.inject.lua_globals")
require("scripts._callbacks")

--

local classIds = require("globals.class_ids")

local coreStartGame = require("scripts.core.start_game")
local coreCheckers = require("scripts.core.checkers")

local actorMenu = require("scripts.ui.game.ActorMenu").actorMenu
local declarations = require("scripts._declaration")

local utilsUtils = require("scripts.utils.utils")
local utilsActor = require("scripts.utils.actor")
local utilsAlife = require("scripts.utils.alife")
local utilsConfigs = require("scripts.utils.configs")
local debugUtils = require("scripts.utils.debug")
local utilsGameSaves = require("scripts.utils.game_saves")
local utilsGeneral = require("scripts.utils.general")
local utilsPhysics = require("scripts.utils.physics")
local utilsUi = require("scripts.utils.ui")
local utilsTable = require("scripts.utils.table")
local utilsTime = require("scripts.utils.time")
local utilsUnknown = require("scripts.utils.unknown")

start_game_callback = coreStartGame.startGame

utils = utilsUtils
utils.cfg_get_string = utilsConfigs.getConfigString

give_info = utilsActor.giveInfo
disable_info = utilsActor.disableInfo
has_alife_info = utilsActor.hasAlifeInfo

add_story_object = utilsAlife.addStoryObject
get_story_object = utilsAlife.getStoryObject
level_object_by_sid = utilsAlife.levelObjectBySid
get_object_story_id = utilsAlife.getObjectStoryId
get_story_object_id = utilsAlife.getStoryObjectId
get_story_squad = utilsAlife.getStorySquad
get_object_squad = utilsAlife.getObjectSquad
unregister_story_object_by_id = utilsAlife.unregisterStoryObjectById
unregister_story_id = utilsAlife.unregisterStoryId
id_by_sid = utilsAlife.getIdBySid;
action = utilsAlife.action;
action_first = utilsAlife.actionFirst;
reset_action = utilsAlife.resetAction;
interrupt_action = utilsAlife.interruptAction
change_team_squad_group = utilsAlife.changeTeamSquadGroup
get_clsid = utilsAlife.getClsId
is_object_online = utilsAlife.isObjectOnline
set_current_time = utilsAlife.setCurrentTime
stop_play_sound = utilsAlife.stopPlaySound
-- create_ammo = utilsAlife.createAmmo

callstack = debugUtils.callstack
abort = debugUtils.abort

set_save_marker = utilsGameSaves.setSaveMarker

vec_to_str = utilsGeneral.vectorToString
round = utilsGeneral.round
add = utilsGeneral.add
if_then_else = utilsGeneral.ifThenElse
random_choice = utilsGeneral.randomChoice
random_number = utilsGeneral.randomNumber
parse_names = utilsGeneral.parseNames
parse_key_value = utilsGeneral.parseKeyValue
parse_nums = utilsGeneral.parseNums

yaw = utilsPhysics.yaw
yaw_degree = utilsPhysics.yawDegree
yaw_degree3d = utilsPhysics.yawDegree3d
vector_cross = utilsPhysics.vectorCross
vector_rotate_y = utilsPhysics.vectorRotateY
npc_in_actor_frustrum = utilsPhysics.npcInActorFrustum
distance_between = utilsPhysics.distanceBetween
distance_between_safe = utilsPhysics.distanceBetweenSafe
vector_cmp = utilsPhysics.vectorCmp
vector_cmp_prec = utilsPhysics.vectorCmpPrec
graph_distance = utilsPhysics.graphDistance

empty = utilsTable.isEmpty
clear_table = utilsTable.clearTable
copy_table = utilsTable.copyTable

wait_game = utilsTime.waitGame
wait = utilsTime.wait
in_time_interval = utilsTime.isInTimeInterval

-- get_param_string = utilsUnknown.getParamString

-- =====================================================================================================================

IsMonster = coreCheckers.isMonster
IsStalker = coreCheckers.isStalker
isWeapon = coreCheckers.isWeapon
isArtefact = coreCheckers.isArtefact

squad_community_by_behaviour = declarations.squadCommunityByBehaviour
monster_classes = classIds.monster_class_ids
stalker_classes = classIds.stalker_class_ids
weapon_classes = classIds.weapon_class_ids
artefact_classes = classIds.artefact_class_ids

-- =====================================================================================================================

-- todo: Remove
print_table = function (table) end
-- todo: Remove
function printf(fmt,...) end


time_infinite = 100000000

schemes = {} -- ������������ ���� �������
stypes = {} -- ���v ����

-- =====================================================================================================================

dev_debug = true
mus_vol = 0
amb_vol = 0

-- =====================================================================================================================

if (jit == nil) then
	profiler.setup_hook	()
end


if nil == time_global then
	time_global = function () return device():time_global() end
end

-- =====================================================================================================================

function load_scheme(filename, scheme, stype)
	schemes[scheme] = filename
	stypes[scheme] = stype
end

-------------------------------------------------------------------------------------------

function get_object_community(obj)
	if type(obj.id) == "function" then
		return character_community(obj)
	else
		return alife_character_community(obj)
	end
end

function character_community(obj)
	if IsStalker(obj) then
		return obj:character_community()
	end
	return "monster"
end

function alife_character_community (obj)
	if IsStalker(obj, obj:clsid()) then
		return obj:community()
	end

	return "monster"
end

function set_inactivate_input_time(delta)
	db.storage[db.actor:id()].disable_input_time = game.get_game_time()
	db.storage[db.actor:id()].disable_input_idle = delta
	level.disable_input()
end

function create_ammo(section, position, lvi, gvi, pid, num)
	local ini = system_ini()

	local num_in_box = ini:r_u32(section, "box_size")
	local t = {}
	while num > num_in_box do
		local obj = alife():create_ammo(section, position, lvi,	gvi, pid, num_in_box)
		table.insert(t, obj)
		num = num - num_in_box
	end
	local obj = alife():create_ammo(section, position, lvi,	gvi, pid, num)
	table.insert(t, obj)
	return t
end

quest_section = {}

-- ����������� ������ � ������������ �� ���������
function get_param_string(src_string , obj)
	--printf("src_string is [%s] obj name is [%s]", tostring(src_string), obj:name())
	local script_ids = db.script_ids[obj:id()]
	local out_string, num = string.gsub(src_string, "%$script_id%$", tostring(script_ids))
	if num > 0 then
		return out_string , true
	else
		return src_string , false
	end
end
