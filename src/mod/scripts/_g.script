--- --------------------------------------------------------------------------------------------------------------------
--- Global entrypoint for stalker scripts
--- --------------------------------------------------------------------------------------------------------------------

-- Inject LUA globals and enable modules requiring
package.path = package.path .. string.format("%sgamedata\\?.script;", getFS():update_path("$fs_root$", ""))

--

local LuaLogger = require("scripts.utils.logging").LuaLogger
local create_ts_class_instance = require("lualib_bundle").__TS__New
local log = create_ts_class_instance(LuaLogger, "_g");

log:info("Initialize globals")

--

require("scripts.inject.lua_globals")
require("scripts._callbacks")

--

local coreStartGame = require("scripts.core.start_game")

pda = require("scripts.ui.game.pda")
actor_menu = require("scripts.ui.game.ActorMenu").actorMenu

local utilsUtils = require("scripts.utils.utils")
local utilsActor = require("scripts.utils.actor")
local utilsAlife = require("scripts.utils.alife")
local utilsConfigs = require("scripts.utils.configs")
local debugUtils = require("scripts.utils.debug")
local utilsGameSaves = require("scripts.utils.game_saves")
local utilsGeneral = require("scripts.utils.general")
local utilsPhysics = require("scripts.utils.physics")
local utilsUi = require("scripts.utils.ui")
local utilsTable = require("scripts.utils.table")
local utilsTime = require("scripts.utils.time")
local utilsUnknown = require("scripts.utils.unknown")

utils = utilsUtils
utils.cfg_get_string = utilsConfigs.getConfigString

-- start_game_callback = coreStartGame.startGame

give_info = utilsActor.giveInfo
disable_info = utilsActor.disableInfo
has_alife_info = utilsActor.hasAlifeInfo

add_story_object = utilsAlife.addStoryObject
get_story_object = utilsAlife.getStoryObject
level_object_by_sid = utilsAlife.levelObjectBySid
get_object_story_id = utilsAlife.getObjectStoryId
get_story_object_id = utilsAlife.getStoryObjectId
get_story_squad = utilsAlife.getStorySquad
get_object_squad = utilsAlife.getObjectSquad
unregister_story_object_by_id = utilsAlife.unregisterStoryObjectById
unregister_story_id = utilsAlife.unregisterStoryId
id_by_sid = utilsAlife.getIdBySid;

change_team_squad_group = utilsAlife.changeTeamSquadGroup
get_clsid = utilsAlife.getClsId
is_object_online = utilsAlife.isObjectOnline
set_current_time = utilsAlife.setCurrentTime
stop_play_sound = utilsAlife.stopPlaySound
-- reset_action = utilsAlife.resetAction
-- create_ammo = utilsAlife.createAmmo
-- interrupt_action = utilsAlife.interruptAction

callstack = debugUtils.callstack
abort = debugUtils.abort

set_save_marker = utilsGameSaves.setSaveMarker

vec_to_str = utilsGeneral.vectorToString
round = utilsGeneral.round
add = utilsGeneral.add
if_then_else = utilsGeneral.ifThenElse
random_choice = utilsGeneral.randomChoice
random_number = utilsGeneral.randomNumber
-- parse_names = utilsGeneral.parseNames
-- parse_key_value = utilsGeneral.parseKeyValue
-- parse_nums = utilsGeneral.parseNums

yaw = utilsPhysics.yaw
yaw_degree = utilsPhysics.yawDegree
yaw_degree3d = utilsPhysics.yawDegree3d
vector_cross = utilsPhysics.vectorCross
vector_rotate_y = utilsPhysics.vectorRotateY
npc_in_actor_frustrum = utilsPhysics.npcInActorFrustum
distance_between = utilsPhysics.distanceBetween
distance_between_safe = utilsPhysics.distanceBetweenSafe
vector_cmp = utilsPhysics.vectorCmp
vector_cmp_prec = utilsPhysics.vectorCmpPrec
graph_distance = utilsPhysics.graphDistance

empty = utilsTable.isEmpty
clear_table = utilsTable.clearTable
copy_table = utilsTable.copyTable

wait_game = utilsTime.waitGame
wait = utilsTime.wait
in_time_interval = utilsTime.isInTimeInterval

-- get_param_string = utilsUnknown.getParamString

-- =====================================================================================================================

-- todo: Remove
print_table = function (table)
  log:table(table);
end

-- todo: Remove
function printf(fmt,...)
  log:info(string.format(fmt, ...))
end


aa = nil
time_infinite = 100000000

schemes = {} -- ������������ ���� �������
stypes = {} -- ���v ����

-- =====================================================================================================================

dev_debug = false
sim_debug = false
mus_vol = 0
amb_vol = 0

-- =====================================================================================================================

if (jit == nil) then
	profiler.setup_hook	()
end


if nil == time_global then
	time_global = function () return device():time_global() end
end

-- =====================================================================================================================

function load_scheme(filename, scheme, stype)
	schemes[scheme] = filename
	stypes[scheme] = stype
end

function action(obj,...)
	local arg = {...}
	local act = entity_action()
	local i = 1
	while true do
		if (arg[i] ~= nil) then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if (obj ~= nil) then
		obj:command(act,false)
	end
	return  entity_action(act)
end

function action_first(obj,...)
	local arg = {...}
	local act = entity_action()
	local i = 1
	while true do
		if (arg[i] ~= nil) then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if (obj ~= nil) then
		obj:command(act,true)
	end
	return  entity_action(act)
end

function reset_action (npc, script_name)
	if npc:get_script () then
		npc:script (false, script_name)
	end
	npc:script (true, script_name)
end

--------------------------------------------------
-- Functions and variables added by Zmey
--------------------------------------------------

-- +��� � ����v� ������ �v��������� �����-�� ��������, ����v���� ��� � �������� ��������v� �����
function interrupt_action(who, script_name)
	if who:get_script() then
		who:script(false, script_name)
	end
end

function parse_names( s )
	local t = {}
	for name in string.gfind( s, "([%w_\\]+)%p*" ) do
		--for name in string.gfind( s, "%s*([^%,]+)%s*" ) do
		table.insert( t, name )
	end
	return t
end

function parse_key_value( s )
	local t = {}
	if s == nil then
		return nil
	end
	local key, nam = nil, nil
	for name in string.gfind( s, "([%w_\\]+)%p*" ) do
		if key == nil then
			key = name
		else
			t[key] = name
			key = nil
		end
	end
	return t
end

function parse_nums( s )
	local t = {}
	for entry in string.gfind( s, "([%-%d%.]+)%,*" ) do
		table.insert( t, tonumber( entry ) )
	end
	return t
end

function store_table(table, subs)
	local sub
	if subs ~= nil then
		sub = subs
	else
		sub = ""
	end
	printf(sub.."{")
	for k,v in pairs(table) do
		if type(v) == "table" then
			printf(sub.."%s = ", tostring(k))
			store_table(v, sub.."    ")
		elseif type(v) == "function" then
			printf(sub.."%s = \"func\",", tostring(k))
		elseif type(v) == "userdata" then
			printf(sub.."%s = \"userdata\",", tostring(k))
		elseif type(v) == "string" then
			printf(sub.."%s = \"%s\",", tostring(k), tostring(v))
		else
			printf(sub.."%s = %s,", tostring(k), tostring(v))
		end
	end
	printf(sub.."},")
end

-------------------------------------------------------------------------------------------
local monster_classes = {}
local stalker_classes = {}
local weapon_classes = {}
local artefact_classes = {}

function IsMonster (object, class_id)
	local id = class_id or get_clsid(object)
	return monster_classes[id] == true
end

function IsStalker (object, class_id)
	local id = class_id or get_clsid(object)
	return stalker_classes[id] == true
end

function isWeapon(object, class_id)
	local id = class_id or get_clsid(object)
	return weapon_classes[id] == true
end

function isArtefact(object, class_id)
	local id = class_id or get_clsid(object)
	return artefact_classes[id] == true
end


-------------------------------------------------------------------------------------------
---
function get_object_community(obj)
	if type(obj.id) == "function" then
		return character_community(obj)
	else
		return alife_character_community(obj)
	end
end

function character_community (obj)
	if IsStalker(obj) then
		return obj:character_community()
	end
	return "monster"
end

function alife_character_community (obj)
	if IsStalker(obj, obj:clsid()) then
		return obj:community()
	end
	return "monster"
end

function set_inactivate_input_time(delta)
	db.storage[db.actor:id()].disable_input_time = game.get_game_time()
	db.storage[db.actor:id()].disable_input_idle = delta
	level.disable_input()
end

-- ���������: ������ ���������, ������ ���� ��������, ����� ��� � �������.
--[[
function set_sleep_relocate(point, look, timeout)
	db.storage[db.actor:id()].sleep_relocate_time = game.get_game_time()
	db.storage[db.actor:id()].sleep_relocate_idle = timeout*60
	db.storage[db.actor:id()].sleep_relocate_point = point
	db.storage[db.actor:id()].sleep_relocate_look = look
end
]]--

function create_ammo(section, position, lvi, gvi, pid, num)
	local ini = system_ini()

	local num_in_box = ini:r_u32(section, "box_size")
	local t = {}
	while num > num_in_box do
		local obj = alife():create_ammo(section, position, lvi,	gvi, pid, num_in_box)
		table.insert(t, obj)
		num = num - num_in_box
	end
	local obj = alife():create_ammo(section, position, lvi,	gvi, pid, num)
	table.insert(t, obj)
	return t
end

ammo_section = {}
ammo_section["ammo_9x18_fmj"]		= true
ammo_section["ammo_9x18_pmm"]		= true
ammo_section["ammo_9x19_fmj"]		= true
ammo_section["ammo_9x19_pbp"]		= true
ammo_section["ammo_5.45x39_fmj"]	= true
ammo_section["ammo_5.45x39_ap"]		= true
ammo_section["ammo_5.56x45_ss190"]	= true
ammo_section["ammo_5.56x45_ap"]		= true
ammo_section["ammo_5.7x28_fmj"]		= true
ammo_section["ammo_5.7x28_ap"]		= true
ammo_section["ammo_7.62x54_7h1"]	= true
ammo_section["ammo_9x39_pab9"]		= true
ammo_section["ammo_gauss"]			= true
ammo_section["ammo_9x39_ap"]		= true
ammo_section["ammo_11.43x23_fmj"]	= true
ammo_section["ammo_11.43x23_hydro"]	= true
ammo_section["ammo_12x70_buck"]		= true
ammo_section["ammo_12x76_zhekan"]	= true
ammo_section["ammo_pkm_100"]		= true

quest_section = {}

-- ����������� ������ � ������������ �� ���������
function get_param_string(src_string , obj)
	--printf("src_string is [%s] obj name is [%s]", tostring(src_string), obj:name())
	local script_ids = db.script_ids[obj:id()]
	local out_string, num = string.gsub(src_string, "%$script_id%$", tostring(script_ids))
	if num > 0 then
		return out_string , true
	else
		return src_string , false
	end
end

local save_markers = {}

-- ������� ��� �������� ������������ ���� ����
function set_save_marker(p, mode, check, prefix)
	-- ���������� ���� �������.
	local result = ""
	--	if debug ~= nil then
	--		local info_table = debug.getinfo(2)
	--		local script_name = string.gsub(info_table.short_src, "%.script", "")
	--		script_name = string.gsub(script_name, "gamedata\\scripts\\", "")
	--		result = script_name
	--	end

	--	if prefix ~= nil then
	result = result .. "_" .. prefix
	--	end

	if check == true then
		if save_markers[result] == nil then
			abort("Trying to check without marker %s", result)
		end

		if mode == "save" then
			local dif = p:w_tell() - save_markers[result]
			printf(result..": SAVE DIF: %s", dif)
			if dif >= 8000 then
				printf("WARNING! may be this is problem save point")
			end
			if dif >= 10240 then
				--				abort("You are saving too much")
			end
			p:w_u16(dif)
		else
			local c_dif = p:r_tell() - save_markers[result]
			local dif = p:r_u16()
			if dif ~= c_dif then
				abort("INCORRECT LOAD [%s].[%s][%s]", result, dif, c_dif)
			else
				printf(result..": LOAD DIF: %s", dif)
			end
		end
		return
	end

	if mode == "save" then
		printf(result..": set save marker: %s", p:w_tell())
		save_markers[result] = p:w_tell()
		if p:w_tell() > 16000 then
			abort("You are saving too much")
		end
	else
		printf(result..": set load marker: %s", p:r_tell())
		save_markers[result] = p:r_tell()
	end

end

function start_game_callback()
	aa = alife()

	squad_community_by_behaviour = {
		["stalker"]							= "stalker",
		["bandit"]							= "bandit",
		["dolg"]							= "dolg",
		["freedom"]							= "freedom",
		["army"]							= "army",
		["ecolog"]							= "ecolog",
		["killer"]							= "killer",
		["zombied"]							= "zombied",
		["monolith"]						= "monolith",
		["monster"]							= "monster",
		["monster_predatory_day"]			= "monster",
		["monster_predatory_night"]			= "monster",
		["monster_vegetarian"]				= "monster",
		["monster_zombied_day"]				= "monster",
		["monster_zombied_night"]			= "monster",
		["monster_special"]					= "monster"
	}

	monster_classes = {
		[clsid.bloodsucker_s] 			= true,
		[clsid.boar_s] 					= true,
		[clsid.dog_s] 					= true,
		[clsid.flesh_s] 				= true,
		[clsid.pseudodog_s] 			= true,
		[clsid.burer_s] 				= true,
		--		[clsid.cat_s] 					= true,
		[clsid.chimera_s] 				= true,
		[clsid.controller_s] 			= true,
		--		[clsid.fracture_s] 				= true,
		[clsid.poltergeist_s] 			= true,
		[clsid.gigant_s] 				= true,
		--		[clsid.zombie_s] 				= true,
		[clsid.snork_s] 				= true,
		[clsid.tushkano_s] 				= true,
		[clsid.psy_dog_s] 				= true,
		[clsid.psy_dog_phantom_s] 		= true}

	stalker_classes = {
		[clsid.script_actor] 			= true,
		[clsid.script_stalker] 			= true}

	weapon_classes = {
		[clsid.wpn_vintorez_s] 			= true,
		[clsid.wpn_ak74_s] 				= true,
		[clsid.wpn_lr300_s] 			= true,
		[clsid.wpn_hpsa_s] 				= true,
		[clsid.wpn_pm_s] 				= true,
		[clsid.wpn_shotgun_s] 			= true,
		[clsid.wpn_auto_shotgun_s]		= true,
		[clsid.wpn_bm16_s] 				= true,
		[clsid.wpn_svd_s] 				= true,
		[clsid.wpn_svu_s] 				= true,
		[clsid.wpn_rg6_s] 				= true,
		[clsid.wpn_rpg7_s] 				= true,
		[clsid.wpn_val_s] 				= true,
		[clsid.wpn_walther_s] 			= true,
		[clsid.wpn_usp45_s] 			= true,
		[clsid.wpn_groza_s] 			= true,
		[clsid.wpn_knife_s] 			= true,
		[clsid.wpn_grenade_f1_s] 		= true,
		[clsid.wpn_grenade_rgd5_s] 		= true,
		[clsid.wpn_grenade_launcher] 	= true,
		[clsid.wpn_grenade_fake] 		= true}

	artefact_classes = {
		[clsid.art_bast_artefact] 		= true,
		[clsid.art_black_drops] 		= true,
		[clsid.art_dummy] 				= true,
		[clsid.art_electric_ball] 		= true,
		[clsid.art_faded_ball] 			= true,
		[clsid.art_galantine] 			= true,
		[clsid.art_gravi] 				= true,
		[clsid.art_gravi_black] 		= true,
		[clsid.art_mercury_ball] 		= true,
		[clsid.art_needles] 			= true,
		[clsid.art_rusty_hair] 			= true,
		[clsid.art_thorn] 				= true,
		[clsid.art_zuda] 				= true,
		[clsid.artefact] 				= true,
		[clsid.artefact_s] 				= true}

	log:info("start_game_callback called")
	smart_names.init_smart_names_table()
	task_manager.clear_task_manager()
	sound_theme.load_sound()
	xr_sound.start_game_callback()
	dialog_manager.fill_phrase_table()
	xr_s.init()
	sim_objects.clear()
	sim_board.clear()
	sr_light.clean_up ()
	actor_menu:initQuickSlotItems()
	-- T����������� �����������
	--local test_object = test_object.test_object_class()
	--test_object:test()
end
