local LuaLogger = require("scripts.utils.logging").LuaLogger
local create_ts_class_instance = require("lualib_bundle").__TS__New
local log = create_ts_class_instance(LuaLogger, "utils");

log:info("Initialize utils")

local export = {}

local function door_default_callback(door, actor)
	local ph_shell = door:get_physics_shell()
	local joint = ph_shell:get_joint_by_bone_name("door")

	local low_limit = 0
	local hi_limit = 0
	low_limit, hi_limit = joint:get_limits(low_limit, hi_limit, 0)

	local angle = joint:get_axis_angle(0)
	if angle-low_limit > hi_limit - angle
	then
		joint:set_max_force_and_velocity(100, -1.5, 0)
	else
		joint:set_max_force_and_velocity(100, 1.5, 0)
	end
end

function export.door_init(door)
	door:set_use_callback(door_default_callback)
end

-- ����� door ��������� ����������� � ���������, ��� ��� ����� ���������� callback_fn
function export.door_close_then_lock(door, callback_fn)
	local ph_shell = door:get_physics_shell()
	local joint = ph_shell:get_joint_by_bone_name("door")
	local low_limit = 0
	local hi_limit = 0
	low_limit, hi_limit = joint:get_limits(low_limit, hi_limit, 0)
	local angle = joint:get_axis_angle(0)
	if angle-low_limit > hi_limit - angle
	then
		joint:set_max_force_and_velocity(1000000, 0, 0)
	else
		joint:set_max_force_and_velocity(1000000, 0, 0)
	end
end

--unlock_then_open(door) -- ����� ���������� � ��������� ���������
--locked(door) -- true, ���� ����� ������� � ��������

--��� ������� ������� ���������� ����� ��� ������ ����� ����������� �� ����������� ����������� ���������.

function export.parse_waypoint_data(pathname, wpflags, wpname)
	local rslt = {}

	rslt.flags = wpflags

	local at
	if string.find(wpname, "|", at, true) == nil then
		return rslt
	end

	local par_num
	local fld
	local val

	par_num = 1
	for param in string.gfind(wpname, "([%w%+~_\\%=%{%}%s%!%-%,%*]+)|*") do
		if par_num == 1 then
			-- continue
		else
			if param == "" then
				abort("path '%s': waypoint '%s': syntax error in waypoint name", pathname, wpname)
			end

			local t_pos = string.find(param, "=", 1, true)

			if t_pos == nil then
				printf("Path_param: %s", param)
				abort("path '%s': waypoint '%s': syntax error in waypoint name", pathname, wpname)
			end

			fld = string.sub(param, 1,t_pos - 1)
			val = string.sub(param, t_pos + 1)

			if not fld or fld == "" then
				abort("path '%s': waypoint '%s': syntax error while parsing the param '%s': no field specified",
					pathname, wpname, param)
			end

			if not val or val == "" then
				val = "true"
			end

			if fld == "a" then
				rslt[fld] = xr_logic.parse_condlist(db.actor, "waypoint_data", "anim_state", val)
			else
				rslt[fld] = val
			end
		end
		par_num = par_num + 1
	end
	return rslt
end

function export.path_parse_waypoints(pathname)
	if not pathname then
		return nil
	end

	--printf("_bp: path_parse_waypoints: pathname='%s'", pathname)
	local ptr = patrol(pathname)
	local cnt = ptr:count()
	local rslt = {}

	for pt = 0, cnt - 1 do
		--printf("_bp: %s", ptr:name(pt))
		rslt[pt] = export.parse_waypoint_data(pathname, ptr:flags(pt), ptr:name(pt))
		if not rslt[pt] then
			abort("error while parsing point %d of path '%s'", pt, pathname)
		end

	end

	return rslt
end

function export.path_parse_waypoints_from_arglist(pathname, num_points, ...)
	local arg = {...}

	if not pathname then
		return nil
	end

	local ptr = patrol(pathname)
	local cnt = ptr:count()

	if cnt ~= num_points then
		abort("path '%s' has %d points, but %d points were expected", pathname, cnt, num_points)
	end

	local rslt = {}

	local cur_arg
	local fl
	for pt = 0, cnt-1 do
		cur_arg = arg[pt + 1]
		if not cur_arg then
			abort("script error [1] while processing point %d of path '%s'", pt, pathname)
		end
		fl = flags32()
		fl:assign(cur_arg[1])
		rslt[pt] = export.parse_waypoint_data(pathname, fl, cur_arg[2])
		if not rslt[pt] then
			abort("script error [2] while processing point %d of path '%s'", pt, pathname)
		end
	end

	return rslt
end

function export.get_scheme_by_section(section)
	local scheme = string.gsub(section, "%d", "")
	local at, to = string.find(scheme, "@", 1, true)
	if at and to then
		scheme = string.sub(scheme, 1, at - 1)
	end
	return scheme
end

function export.no_need_to_rotate(npc, target_pos)
	local y = yaw(npc:direction(), vector():set(target_pos):sub(npc:position()))

	return y < 0.3
end

function export.no_need_to_rotate_xz(npc, target_pos)
	local dir1 = npc:direction()
	dir1.y = 0
	local dir2 = vector():set(target_pos):sub(npc:position())
	dir2.y = 0
	local y = yaw(dir1, dir2)

	return y < 0.3
end

function export.get_nearest_waypoint(obj, pathname, ptr, cnt)
	local pt_chosen = nil
	local min_dist = nil
	local dist
	for i = 0, cnt - 1 do
		dist = obj:position():distance_to(ptr:point(i))
		if not min_dist or dist < min_dist then
			min_dist = dist
			pt_chosen = i
		end
	end
	if not pt_chosen then
		abort("object '%s': path '%s': get_nearest_waypoint: unable to choose a nearest waypoint (path has no waypoints?)",
			obj:name(), pathname)
	end
	return pt_chosen
end

function export.npc_in_zone(npc, zone)
	return npc ~= nil and zone ~= nil and zone:inside(npc:position())
end

------------------------- ������/�������� CTime ---------------------------
local CTime_0

if not editor() then
	CTime_0 = game.CTime()
end

-- ������ CTime � �����. ���� t=nil, �� ������� ���� ������� ����
function export.w_CTime(p, t )
	--set_save_marker(p, "save", false, "CTIME")
	if t == nil then
		p:w_u8(-1)
		--set_save_marker(p, "save", true, "CTIME")
		return
	end

	if (CTime == nil) or (t ~= CTime_0) then
		local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
		Y, M, D, h, m, s, ms = t:get( Y, M, D, h, m, s, ms )

		p:w_u8 ( Y - 2000 )
		p:w_u8 ( M )
		p:w_u8 ( D )
		p:w_u8 ( h )
		p:w_u8 ( m )
		p:w_u8 ( s )
		p:w_u16( ms )
	else
		p:w_u8 ( 0 )
	end
	--set_save_marker(p, "save", true, "CTIME")
end

-- ������ CTime �� ������
function export.r_CTime(p )
	--set_save_marker(p, "load", false, "CTIME")
	local Y = p:r_u8()
	if Y == 255 then
		--set_save_marker(p, "load", true, "CTIME")
		return nil
	end

	if Y ~= 0 then
		local t = game.CTime()
		local M, D, h, m, s, ms = p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u16()
		t:set( Y + 2000,  M, D, h, m, s, ms)
		--set_save_marker(p, "load", true, "CTIME")
		return t
	else
		--set_save_marker(p, "load", true, "CTIME")
		return 0
	end
end
---------------------------------------------------------------------------

-- �������� � ��������� ����������� ���� �� ����������� � ��������.
-- ���������� vertex_id, � ������� �������� ���������
function export.send_to_nearest_accessible_vertex(npc, v_id )
	if not npc:accessible( v_id ) then
		local vtemp = vector()
		--printf("vertex_position")
		v_id, vtemp = npc:accessible_nearest( level.vertex_position( v_id ), vtemp )
	end

	npc:set_dest_level_vertex_id( v_id )

	return v_id
end

-- ���������� �� � ������ ������ ����� ������?
-- ����� ��� ����, ����� ������� �����, ����� ���������� ���������� ��� ����������, � ����� ���
function export.level_changing()
	local sim = alife()

	if not sim then
		return false
	end

	local actor_gv = game_graph():vertex( sim:actor().m_game_vertex_id )

	return actor_gv:level_id() ~= sim:level_id()
end

function export.parse_data_1v(npc, s)
	local t = {}

		if s then
		for name in string.gfind( s, "(%|*%d+%|[^%|]+)%p*" ) do
--			printf("[%s]", utils.to_str(name))
			local dat = {	dist = nil,
							state = nil}

			local t_pos = string.find( name, "|", 1, true )

			local dist = string.sub( name, 1, t_pos - 1 )
			local state	= string.sub( name, t_pos + 1)

--			printf("	[%s]=[%s][%s]", utils.to_str(dist), utils.to_str(state), utils.to_str(sound))
			dat.dist = tonumber(dist)
			if state then
				dat.state = xr_logic.parse_condlist(npc, dist, state, state)
			end
			t[tonumber(dist)] = dat
		end
	end
		return t
end

function export.parse_data(npc, s)
	local t = {}

		if s then
		for name in string.gfind( s, "(%|*%d+%|[^%|]+)%p*" ) do
--			printf("[%s]", utils.to_str(name))
			local dat = {	dist = nil,
							state = nil,
							sound = nil}

			local t_pos = string.find( name, "|", 1, true )
			local s_pos = string.find( name, "@", 1, true )

			local dist = string.sub( name, 1, t_pos - 1 )
			local state
			local sound

			if s_pos then
				state	= string.sub( name, t_pos + 1,
											s_pos - 1 )
				sound	= string.sub( name, s_pos + 1)
			else
				state	= string.sub( name, t_pos + 1)
			end

--			printf("	[%s]=[%s][%s]", utils.to_str(dist), utils.to_str(state), utils.to_str(sound))

			dat.dist = tonumber(dist)
			if state then
				dat.state = xr_logic.parse_condlist(npc, dist, state, state)
			end
			if sound then
				dat.sound = xr_logic.parse_condlist(npc, dist, sound, sound)
			end
			table.insert(t, dat)
		end
	end
		return t
end

function export.parse_syn_data(npc, s)
--	printf("parse_syn_data [%s]", utils.to_str(s))
	local t = {}
		if s then
		for name in string.gfind( s, "(%|*[^%|]+%|*)%p*" ) do
			local dat = {	zone = nil,
							state = nil,
							sound = nil}
--			printf("[%s]", utils.to_str(name))

			local t_pos = string.find( name, "@", 1, true )
			local s_pos = string.find( name, "|", 1, true )

			local state = string.sub( name, 1, t_pos - 1 )
			local sound
			if s_pos then
				sound = string.sub( name, t_pos + 1, s_pos -1)
			else
				sound = string.sub( name, t_pos + 1)
			end

			dat.state = state
			dat.sound = sound
			table.insert(t, dat)
		end
	end

		return t
end

return export
